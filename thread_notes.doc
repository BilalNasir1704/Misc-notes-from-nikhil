/******************** THREAD NOTES **************************/
Resources: https://computing.llnl.gov/tutorials/pthreads/#Thread
Book : Buttonholf
My Project Work explains well
****************************************************************

Note: Most of the thread function returns zero on successful execution. (Exception - pthread_equal(tid1, tid2))

/*  Beautiful Style Of Thread Creation, cond_wait, cond_timedwait  */

pthread_attr_t attr;
pthread_t thread;
if ((err = pthread_attr_init(&attr))
            || (err = pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED))
            || (err = pthread_create(&thread, &attr, statusUpdater, NULL))
            || (err = pthread_attr_destroy(&attr))) {
        ERR_THROW(0, "Pthread error (%s) forking status-update thread",
                strerror(err));
}

/** Beautiful style to initialize dynamically allocated mutex and cond_var **************/

if ((err = pthread_mutex_init(&pool->poolMutex, NULL))
                || (err = pthread_cond_init(&pool->poolCond, NULL))) {
        ERR_THROW(0, "Error initializing mutex or cond: %s", strerror(err));
    }

/********************* Miscellaneous Concepts *********************************************/

static void *statusUpdater(void *arg)
{
    int *flag, doExit;
    PNsec delta;
    struct timeval tv;
    struct timespec ts;
    int *exp_flag;
    int expRunning;

    pthread_mutex_lock(&statInfo.mut);

    for (doExit = 0; ! doExit; ) {
        delta = statInfo.period;
        if (statInfo.dom && statInfo.filename) {
            exp_flag = expFlag(NULL);
            expRunning = *exp_flag;
            expFlag(exp_flag);
            if (!statInfo.doit || (!expRunning && !writeStat())) delta = statInfo.retry;
        }
        if (delta > 0) {
            gettimeofday(&tv, NULL);
            delta += tv.tv_usec * 1000 + tv.tv_sec * BIL;
            ts.tv_sec = delta / BIL;
            ts.tv_nsec = delta - ts.tv_sec * BIL;
            pthread_cond_timedwait(&statInfo.cond, &statInfo.mut, &ts);
        } else {
            pthread_cond_wait(&statInfo.cond, &statInfo.mut);
        }

        flag = exitFlag(NULL);
        doExit = *flag;
        exitFlag(flag);
    }

    pthread_mutex_unlock(&statInfo.mut);
    return NULL;
}

pthread_join(thread, NULL);  // Join is used only for non-detached thread

/=== Example of pthread_cleanup_push & pthread_cleanup_pop ====/

void pthread_cleanup_push(void (*routine)(void *), void *arg);

Note: Usually, pthread_cleanup_push and pthread_cleanup_pop are used in thread invoked function.
void* threadfunction(void*) {
   pthread_cleanup_push( connFreeCommV, comm );  // pushed first callback function(which takes comm arg) on stack
   BufInit( &outBuf, BUF_STD_BUF );
   pthread_cleanup_push( BufFreeV, &outBuf );  // pushed second on stack.....

   BufInit( &errBuf, BUF_STD_BUF );
   pthread_cleanup_push( BufFreeV, &errBuf );   // pushed third on stack....

   while (1) {
      // thread_func
   }

   pthread_cleanup_pop(1);   // pop first call back function and gets executed with argument
   pthread_cleanup_pop(1);   // pop second call back function and gets executed with argument
   pthread_cleanup_pop(1);   // pop third call back function and gets executed with argument
   return NULL;
}

1. When a thread is canceled, all of the stacked clean-up handlers are popped and executed in the reverse of the order in which they were pushed onto the stack.

2. When a thread terminates by calling pthread_exit(3), all clean-up handlers are executed as described in the preceding point. (Clean-up handlers are not called if the thread terminates by performing a return from the thread start function.)

/** program to print odd and even numbers by two different threads **/

#include "stdio.h"
#include "stdlib.h"
#include "pthread.h"

pthread_mutex_t count_mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t condition_var = PTHREAD_COND_INITIALIZER;
void *functionCount1();
void *functionCount2();
int count = 0;
#define COUNT_DONE 10

void main()
{
 pthread_t thread1, thread2;
 pthread_create( &thread1, NULL, &functionCount1, NULL);
 pthread_create( &thread2, NULL, &functionCount2, NULL);
 pthread_join( thread1, NULL);
 pthread_join( thread2, NULL);
 exit(0);
}

// Print odd numbers
void *functionCount1()
{
  for(;;) {
   // Lock mutex and then wait for signal to relase mutex
   pthread_mutex_lock( &count_mutex );
   if ( count % 2 != 0 ) {
     pthread_cond_wait( &condition_var, &count_mutex );
   }
   count++;
   printf("Counter value functionCount1: %d\n",count);
   pthread_cond_signal( &condition_var );
   if ( count >= COUNT_DONE ) {
     pthread_mutex_unlock( &count_mutex );
     return(NULL);
   }
   pthread_mutex_unlock( &count_mutex );
 }
}

// print even numbers
void *functionCount2()
{
  for(;;) {
  // Lock mutex and then wait for signal to relase mutex
  pthread_mutex_lock( &count_mutex );
  if ( count % 2 == 0 ) {
    pthread_cond_wait( &condition_var, &count_mutex );
  }
  count++;
  printf("Counter value functionCount2: %d\n",count);
  pthread_cond_signal( &condition_var );
  if( count >= COUNT_DONE ) {
    pthread_mutex_unlock( &count_mutex );
    return(NULL);
  }
  pthread_mutex_unlock( &count_mutex );
 }
}

/********************* CREATE A THREAD WORKER POOL ******************************************/
struct pthWorkPoolStruct {
    pthread_mutex_t poolMutex;  // mutex for protecting this struct
    pthread_cond_t poolCond;    // condition variable for waking worker
    int destroyFlag;            // set to 1 to tell workers to exit

    int nWorkers;
    void *(*workerFunc)(void *); 
    void (*taskFreeFunc)(void *); 
    pthWorkerData workerData;

    pthread_t *workers;
    pthTaskEntry *queue;       // points to tail of circ list
    int nActive;                // # active workers (not waiting to pop task)
};
typedef struct pthWorkPoolStruct pthWorkPool;

pthWorkPool *pthWorkPoolInit(int nWorkers, void *workerFunc(void *),
                              void taskFreeFunc(void *), void *info)
{
    pthWorkPool *pool;
    int err, nActive, i;

    pool = ALLOC(pthWorkPool, 1); 

    if ((err = pthread_mutex_init(&pool->poolMutex, NULL))
                || (err = pthread_cond_init(&pool->poolCond, NULL))) {
        ERR_THROW(0, "Error initializing mutex or cond: %s", strerror(err));
    }
    pool->destroyFlag = 0;

    pool->nWorkers = nWorkers;
    pool->workerFunc = workerFunc;
    pool->taskFreeFunc = taskFreeFunc;
    pool->workerData.pool = pool;
    pool->workerData.info = info;

    pool->workers = ALLOC(pthread_t, nWorkers);
    pool->queue = NULL;
    pool->nActive = nWorkers;
   
    for (i = 0; i < nWorkers; ++i) {
        pool->workers[i] = pthFork(workerFunc, &pool->workerData, 0);
    }

    do {        // XXX -- hacky way to wait; use a cond?
        pthread_mutex_lock(&(pool)->poolMutex;
        nActive = pool->nActive;
        pthread_mutex_unlock(&(pool)->poolMutex
        if (nActive) pNanoSleep(1e6);
    } while (nActive > 0);

    return pool;
}

/**************** How shared object is managed in threading ****************************/

Note: This is example of templated function:

#define PT_SHOB_MGR(nam, typ, init) \
typ *nam(typ *old)                                              \
{                                                                       \
    static pthread_mutex_t pthMutex = PTHREAD_MUTEX_INITIALIZER;       \
    static typ pthObj;                                                 \
    static int pthIsInitialized = 0;                                   \
    if (old) {                                                          \
        ERR_ASSERT(old == &pthObj);                                    \
        ERR_ASSERT(pth_mutex_unlock(&pthMutex) == 0);                 \
        return NULL;                                                    \
    } else {                                                            \
        ERR_ASSERT(pthread_mutex_lock(&pthMutex) == 0);                   \
        if (!pthIsInitialized) {                                       \
            init(&pthObj);                                             \
            pthIsInitialized = 1;                                      \
        }                                                               \
        return &pthObj;                                                \
    }                                                                   \
}

static void expFlagInit(int *flag)
{
    *flag = 0; 
}

int *exp_flag;
exp_flag = expFlag(NULL);
expRunning = *exp_flag;
expFlag(exp_flag);

PT_SHOB_MGR(expFlag, int, expFlagInit)

Note: As per above concept we can create a singleton object in C language. Look carefully above example, it is
mentaining singleton object. It can be used with or without threading.

Shared Array Manager:
--------------------

#define PT_SHARR_MGR(nam, typ, count, init)                            \
typ *nam(typ *old)                                                      \
{                                                                       \
    static pthread_mutex_t pthMutex = PTHREAD_MUTEX_INITIALIZER;       \
    static typ pthArr[count];                                          \
    static int pthIsInitialized = 0;                                   \
    if (old) {                                                          \
        ERR_ASSERT(old == pthArr);                                     \
        ERR_ASSERT(pthread_mutex_unlock(&pthMutex) == 0);                 \
        return NULL;                                                    \
    } else {                                                            \
        ERR_ASSERT(pthread_mutex_lock(&pthMutex) == 0);                   \
        if (!pthIsInitialized) {                                       \
            init(pthArr);                                              \
            pthIsInitialized = 1;                                      \
        }                                                               \
        return pthArr;                                                 \
    }                                                                   \
}

/***************** Static Initialization Concept ****************/

static struct {
    pthread_mutex_t mut; 
    pthread_cond_t cond;
    ScpDomain *dom;
    char *filename;
    PNsec period, retry;
    bool doit;
} statInfo = {
    PTHREAD_MUTEX_INITIALIZER,
    PTHREAD_COND_INITIALIZER,
    NULL,
    NULL,
    0, 0,
    true,
};
    
/****************** Important Concept ***************************/
 
pthread_cond_signal does not unlock the mutex (it can't as it has no reference to the mutex, so how could it know what to unlock?) In fact, the signal need not have any connection to the mutex; the signalling thread does not need to hold the mutex, though for most algorithms based on condition variables it will.

pthread_cond_wait unlocks the mutex just before it sleeps (as you note), but then it reaquires the mutex (which may require waiting) when it is signalled, before it wakes up. So if the signalling thread holds the mutex (the usual case), the waiting thread will not proceed until the signalling thread also unlocks the mutex.
*/

/**************** pthread_cond_timedwait() *****************************/

The pthread_cond_timedwait() function blocks the calling thread, waiting for the condition specified by cond to be signaled or broadcast to.

When pthread_cond_timedwait() is called, the calling thread must have mutex locked. The pthread_cond_timedwait() function atomically unlocks the mutex and performs the wait for the condition. In this case, atomically means with respect to the mutex and the condition variable and other access by threads to those objects through the pthread condition variable interfaces.

If the wait is satisfied or times out, or if the thread is canceled, before the thread is allowed to continue, the mutex is automatically acquired by the calling thread. If mutex is not currently locked, an EPERM error results. You should always associate only one mutex with a condition at a time. Using two different mutexes with the same condition at the same time could lead to unpredictable serialization in your application

The time to wait is specified by the abstime parameter as an absolute system time at which the wait expires. If the current system clock time passes the absolute time specified before the condition is signaled, an ETIMEDOUT error results. After the wait begins, the wait time is not affected by changes to the system clock.

Although time is specified in seconds and nanoseconds, the system has approximately millisecond granularity. Due to scheduling and priorities, the amount of time you actually wait might be slightly more or less than the amount of time specified.

The current absolute system time can be retrieved as a timeval structure using the system clock interface gettimeofday(). The timeval structure can easily have a delta value added to it and be converted to a timespec structure. The MI time interfaces can be used to retrieve the current system time. The MI time also needs to be converted to a timespec structure before use by pthread_cond_timedwait() using the Qp0zConvertTime() interface.

cond
(Input) Address of the condition variable to wait for
mutex
(Input) Address of the locked mutex associated with the condition variable
abstime
(Input) Address of the absolute system time at which the wait expires

Return value: 0 on success.

pthread_mutex_t fakeMutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t fakeCond = PTHREAD_COND_INITIALIZER;

void mywait(int timeInMs)
{
    struct timespec timeToWait;
    struct timeval now;
    int rt;

    gettimeofday(&now,NULL);


    timeToWait.tv_sec = now.tv_sec+5;
    timeToWait.tv_nsec = (now.tv_usec+1000UL*timeInMs)*1000UL;

    pthread_mutex_lock(&fakeMutex);
    rt = pthread_cond_timedwait(&fakeCond, &fakeMutex, &timeToWait);
    pthread_mutex_unlock(&fakeMutex);
    printf("\nDone\n");
}

void* fun(void* arg)
{
    printf("\nIn thread\n");
    mywait(1000);
}

int main()
{
    pthread_t thread;
    void *ret;

    pthread_create(&thread, NULL, fun, NULL);
    pthread_join(thread,&ret);
}

/************************** Thread functions ******************************/

All thread functions returns 0 on success except pthread_equal.
pthread_equal returns non-zero value if bo threads are equal thread id.

Mutex and conditional variable static initialization:
pthread_mutex_t mut = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t cond = PTHREAD_COND_INITIALIZER;

No need to destroy mutex if statically initialized.

int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);
int pthread_mutex_destroy(pthread_mutex_t *mutex);
int pthread_mutex_lock(pthread_mutex_t *mutex);
int pthread_mutex_unlock(pthread_mutex_t *mutex);
int pthread_mutex_trylock(pthread_mutex_t *mutex);


int pthread_cond_init(pthread_cond_t *cond, const pthread_condattr_t *attr);
int pthread_cond_destroy(pthread_cond_t *cond);
int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex);
int pthread_cond_timedwait(pthread_cond_t *cond, pthread_mutex_t *mutex,
                           const struct timespec *abstime);
int pthread_cond_signal(pthread_cond_t *cond);
int pthread_cond_broadcast(pthread_cond_t *cond);


int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                  void *(*start_routine)(void *), void *arg);
int pthread_detach(pthread_t thread);
int pthread_equal(pthread_t t1, pthread_t t2);
void pthread_exit(void *value_ptr);
int pthread_join(pthread_t thread, void **value_ptr);
int pthread_cancel(pthread_t thread);
pthread_t pthread_self(void);

int pthread_attr_init(pthread_attr_t *attr);
int pthread_attr_destroy(pthread_attr_t *attr);
int pthread_attr_getstacksize(const pthread_attr_t *attr, size_t *stacksize);
int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize);
int pthread_attr_getdetachstate(const pthread_attr_t *attr, int *detachstate);
int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate);
int pthread_attr_destroy(pthread_attr_t *attr);

Note: something similar for mutex and cond attribute.
// instead of attr, mutexattr and condattr

/******************* Miscellaneous*************************************/

pgGetEnv ( char const * const name )
{
   static pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

   char *ret;

   pthread_mutex_lock ( &mutex );

   ret = getenv ( name );

   pthread_mutex_unlock ( &mutex );

   return ret;
}

/****************** Diff between SCHED_YIELD and SLEEP ******************/

Sched_yield: It says processor to make calling thread at the end of the que of same weighted thread que.
It means calling thread is removed from processor and comes to processor again when other threads finishes their timeslot.

Sleep: When sleep is  called, thread gets suspended and goes in wait state till sleep time gets over or wakes up
by signalling by other thread.

When sched_yield is called, thread is pushed off from processor and pushed at the end of thread que for processing.

/****************** THREAD STATES *******************************/

READY, RUNNING, WAIT, SUSPENDED

/******* What will happen pthread_unlock(&mutex) is called multiple times ? **************/

Nothing will happen, once mutex is unlocked, pthread_unlock won't have any effect on it.

/*************** pthread_cancel / pthread_kill ********************************/

pthread_cancel: This API used to terminate the another thread, based on cancel ability state the cleanup handlers are called if any handlers are registered before invoking the thread destructor.

pthread_kill: This API is used just like "kill()" API, it raises a signal to thread. It is possible that sometimes it affects the entire process like when passed SIGKILL to pthread_kill will terminate the entore process.
pthread_kill() can also be used for other activities other than just terminating the thread by passing different
signals.

A thread can be cancelled by "pthread_cancel(thread_id)" irrespective of thread is detached or joinable.
A some cleanup handler is already registered by "pthread_cleanup_push(void(*func)(void*), void* data) " then,
cleanup handler is called automatically by calling pthread_cancel.

pthread_kill() doesn't call registered cleanup handler.

Note: If thread has locled some mutex then it is good practice that mutex is unlocked in thread cleanup handler,
else once thread is canceled by another thread then mutex locked by cancelled thread won't get released.

#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>

typedef struct detail_s
{
  FILE* fp;
  pthread_mutex_t mt;
  pthread_cond_t cd;
}detail_t;

detail_t det = {.fp = NULL, .mt = PTHREAD_MUTEX_INITIALIZER, .cd = PTHREAD_COND_INITIALIZER};

void clean_thread(void* data)
{
  detail_t* det = (detail_t*)(data);
  printf("closing the file\n");
  fclose(det->fp);
  printf("umlocking the mutex\n");
  pthread_mutex_unlock(&det->mt);
}

void* func(void* data)
{
  pthread_cleanup_push(clean_thread, &det);
  pthread_mutex_lock(&(det.mt));
  det.fp = fopen("/home/nvinay/Desktop/thread.txt", "w");
  int count = 20;
  while(count) {
    fprintf(det.fp, "nikhil\n");
    count--;
    sleep(1);
  }

  pthread_cleanup_pop(1);
}

int main()
{
  pthread_t pth;
  pthread_create(&pth, NULL, func, NULL);
  pthread_detach(pth);
  sleep(5);
  printf("cancelling the thread\n");
  pthread_cancel(pth);
  //pthread_join(pth, NULL);
  sleep(10);
  return 0;
}

/**************** Sleep / usleep() / yield ***************************.

sleep()/usleep() works in same ways in thread as process. Only calling thread is suspended for specific time.
sleep takes argument in seconds and usleep takes argument in microseconds.

when yield() is called in any thread, calling thread is shifted in the last of que (holding same time sharing and
other weightage threads).

/******************* Important Notes (pthread_cond_wait() & pthread_cond_timedwait() ************************/

pthread_cond_wait(pthread_cond_t* cond, pthread_mutex_t* mut) : 
This call has reference to condition variable and mutex as well. Once it is called, it starts waiting for a signal on conditional variable and releases mutex atomically irrespective of checking mutex is locked or unlocked.

So, thread moves in waiting state here, once thread gets a signal on conditional variable here then first of
doing anything thread locks the mutex then moves forward. If mutex is locked by another thread then it will be
in blocking state for mutex lock but it won't proceed without locking the mutex.

pthread_cond_timedwait(pthread_cond_t* cond, pthread_mutex_t* mut, const struct timespec *abstime) :

It is veri similar to pthread_cond_wait. Only difference is it will wake once it gets the signal on conditional
variable else it will automatically wakes up once waiting time expires.

While waiting, it will release mutex in similar way and while waking up, first of all it will lock the mutex 
similarly. 

/************************* Miscellaneous Concepts ****************************************/

If two threads are running parallely, and both are sharing one global shared data which is accessed by mutex 
lock/unlock.

Note:
1. Mutex locking is a mechanism to synchronise the data so that both threads can't loose the updated data.
   If both threads are writing on the shared data then, mutex lock is mandatory to write on the shared data.

2. I only one thread is writing on the shared data and other thread is reading the data then mutex is not
   mandatory, one is writing and other is reading then there should not be race condition but again here read 
   thread can miss very much updated data some times. If we really need very much updated data then we can have
   mutext for both read and write else we can work here without mutex lock also.

/************************ pthread_once *****************************************************/

/* pthread_once is used for calling a function in singleton manner. If many time even it is called, pthread_once
 * force it to be executed only once with same pthread_once_t variable.
 * This is very useful in initializing any hardware routine initialization, beacause if more than one thread 
 * started to do the same job(initialization of h/w routine), only one can succeed in initialization sice
 * initialization function will be called only once, rest will not cause any issue. So, One time initialization
 * is handled very gracefully this way.
 * Note: 
 * 1. If any object to be initalized during software bootup, say for example a database handler etc then pthread_once is used.
 * 2. If any work needs to be done once then this method is used where thread does the job parallely once and terminates.
 *
 * pthread_once_t once_control = PTHREAD_ONCE_INIT;
 * int pthread_once(pthread_once_t *once_control, void(*init_routine)());
 *
 * If successful, pthread_once() returns 0.
 * If unsuccessful, pthread_once() returns -1.
 * There are no documented errno values. Use perror() or strerror() to determine the cause of the error
 */

#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>

static void print_name(void)
{
  printf("Nikhil vinay\n");
}

void* thread_func(void* data)
{
  int* thread_num  = (int*)(data);
  printf(" Inside thread number: %d\n", *thread_num);
  static pthread_once_t once = PTHREAD_ONCE_INIT;
  pthread_once(&once, print_name);
  return NULL;
}

int main()
{
   pthread_t tid[3];
   int thread_num[3] = { 1, 2, 3};
   int i = 0;
   for(i = 1; i <=3; i++) {
      pthread_create(&tid[i-1], NULL, thread_func, &thread_num[i-1]);
   }
   for(i = 1; i <=3; i++) {
      pthread_join(tid[i-1], NULL);
   }
   return 0;
}

/************ Why pthread_cond_timedwait() should be used instead of sleep() *******************/

once we call sleep(s) inside a thread, the calling thread gets suspended for s seconds. Once sleep is over,
it can be in wait state till it gets processor to be executed and while calling sleep(), immediately thread
is removed from processor.

Once we call pthread_cond_timed_wait(), it releases the mutex and wait for perticular time to be lapsed but
it doesn't get suspended and stay in touch of processor.

Using any variant of sleep, the behavior is not guaranteed. All the threads can also sleep since the kernel is not aware of the different threads.

A safer and cleaner solution to use is pthread_cond_timedwait.

/*********** What happens to child thread if we call sleep() in main thread *****************/

Child thread will not get affected by sleep() call in main thread.

/********** Is thread created default state is JOINABLE ? ***********************************/

yes, default state is joinable.

Note: A thread may either be joinable or detached.  If a thread is joinable, then another thread can call pthread_join to wait for the thread to terminate and fetch its exit status.  Only when a terminated joinable thread has been joined are the last of its resources released back to the system.  When a detached thread terminates, its resources are automatically released back to the system: it is not possible to join with the thread in order to obtain its exit status.  Making a thread detached is useful for some types of daemon threads whose exit status the application does not need to care about.  By default, a new thread is created in a joinable state, unless attr was set to create the thread in a detached state.

/**************** What is difference between Detached and Joinable thread ***********************/

Create a detached thread when you know you won't want to wait for it with pthread_join(). The only performance benefit is that when a detached thread terminates, its resources can be released immediately instead of having to wait for the thread to be joined before the resources can be released.

It is 'legal' not to join a joinable thread; but it is not usually advisable because (as previously noted) the resources won't be released until the thread is joined, so they'll remain tied up indefinitely (until the program exits) if you don't join it.

/**************** How to detach a default joinable created thread **************************/

A Detached thread automatically releases it allocated resources on exit. No other thread needs to join it. But by default all threads are joinable, so to make a thread detached we need to call pthread_detach() with thread id i.e.

int pthread_detach(pthread_t thread);   // 0 on success, 1 on fail

/**************** How to create a detached thread **************************************/

int err; 
pthread_attr_t attr;
pthread_t thread;

if ((err = pbth_attr_init(&attr))
            || (err = pbth_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED))
            || (err = pbth_create(&thread, &attr, statusUpdater, NULL))
            || (err = pbth_attr_destroy(&attr))) {
        ERR_THROW(0, "Pthread error (%s) forking status-update thread",
                strerror(err));
    }

/************** Create a heartbeat thread which used to check periodically if process is up ***********/

This concept is used in server availability periodic check.

pthread_t id;
int status = pbth_create(&id, NULL, periodic_exe_check, dom);
if (status) {
            pbLog("ALERT! periodic check of eyecon executable"
                  " got %d while creating thread\n",
                  status);
}

/*****************************************************************************************************/

This is interview question: what will be putput of below program:
Output: Every run will have different print. It will print always 1 to <= 20

int x = 0;
void* func(void* data) {
    x = x+1;
    cout<<x<<endl;
}

int main()
{
  pthread_t t[20];
  for(int i = 0; i < 20; i++) {
     pthread_create(&t[i], NULL, func, NULL);
  }
  for(int i = 0; i < 20; i++) {
     pthread_join(t[i], NULL);
  }

  return 0;
}

/*************************************************************************88

Qn: If a thread is detached and main thread exits then, what will happen to detached thread?
   
Ans: Detached thread will keep running until it doesn't acess any global variable which is in main thread.
